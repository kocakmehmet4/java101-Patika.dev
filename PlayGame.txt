import java.util.*;

public class Solution {

    public static boolean canWin(int leap, int[] game) {
        return isWinnable(0, leap, game);
    }
    
    private static boolean isWinnable(int position, int leap, int[] game) {
        // Base Cases
        if (position >= game.length) { // Reached or passed the end of the array
            return true;
        }
        if (position < 0 || game[position] == 1) { // Out of bounds or cell contains 1
            return false;
        }

        // Recursive Cases
        game[position] = 1; // Mark the current cell as visited

        // Try all possible moves: backward, forward (walk or jump)
        return isWinnable(position - 1, leap, game) ||
                isWinnable(position + 1, leap, game) ||
                isWinnable(position + leap, leap, game);
    }

    public static void main(String[] args) {
        Scanner scan = new Scanner(System.in);
        int q = scan.nextInt();
        while (q-- > 0) {
            int n = scan.nextInt();
            int leap = scan.nextInt();
            
            int[] game = new int[n];
            for (int i = 0; i < n; i++) {
                game[i] = scan.nextInt();
            }

            System.out.println( (canWin(leap, game)) ? "YES" : "NO" );
        }
        scan.close();
    }
}